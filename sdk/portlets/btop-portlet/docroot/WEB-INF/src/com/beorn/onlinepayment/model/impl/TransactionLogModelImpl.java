/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.beorn.onlinepayment.model.impl;

import com.beorn.onlinepayment.model.TransactionLog;
import com.beorn.onlinepayment.model.TransactionLogModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TransactionLog service. Represents a row in the &quot;Payment_TransactionLog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.beorn.onlinepayment.model.TransactionLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TransactionLogImpl}.
 * </p>
 *
 * @author Sebastien Meunier
 * @see TransactionLogImpl
 * @see com.beorn.onlinepayment.model.TransactionLog
 * @see com.beorn.onlinepayment.model.TransactionLogModel
 * @generated
 */
public class TransactionLogModelImpl extends BaseModelImpl<TransactionLog>
	implements TransactionLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a transaction log model instance should use the {@link com.beorn.onlinepayment.model.TransactionLog} interface instead.
	 */
	public static final String TABLE_NAME = "Payment_TransactionLog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "transactionLogId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "transactionId", Types.BIGINT },
			{ "paymentApplicationId", Types.VARCHAR },
			{ "remoteId", Types.VARCHAR },
			{ "amount", Types.DOUBLE },
			{ "type_", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Payment_TransactionLog (uuid_ VARCHAR(75) null,companyId LONG,groupId LONG,userId LONG,transactionLogId LONG not null primary key,createDate DATE null,modifiedDate DATE null,transactionId LONG,paymentApplicationId VARCHAR(75) null,remoteId VARCHAR(75) null,amount DOUBLE,type_ LONG)";
	public static final String TABLE_SQL_DROP = "drop table Payment_TransactionLog";
	public static final String ORDER_BY_JPQL = " ORDER BY transactionLog.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY Payment_TransactionLog.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.beorn.onlinepayment.model.TransactionLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.beorn.onlinepayment.model.TransactionLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.beorn.onlinepayment.model.TransactionLog"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long PAYMENTAPPLICATIONID_COLUMN_BITMASK = 2L;
	public static long REMOTEID_COLUMN_BITMASK = 4L;
	public static long UUID_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.beorn.onlinepayment.model.TransactionLog"));

	public TransactionLogModelImpl() {
	}

	public long getPrimaryKey() {
		return _transactionLogId;
	}

	public void setPrimaryKey(long primaryKey) {
		setTransactionLogId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_transactionLogId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return TransactionLog.class;
	}

	public String getModelClassName() {
		return TransactionLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("transactionLogId", getTransactionLogId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("transactionId", getTransactionId());
		attributes.put("paymentApplicationId", getPaymentApplicationId());
		attributes.put("remoteId", getRemoteId());
		attributes.put("amount", getAmount());
		attributes.put("type", getType());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long transactionLogId = (Long)attributes.get("transactionLogId");

		if (transactionLogId != null) {
			setTransactionLogId(transactionLogId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long transactionId = (Long)attributes.get("transactionId");

		if (transactionId != null) {
			setTransactionId(transactionId);
		}

		String paymentApplicationId = (String)attributes.get(
				"paymentApplicationId");

		if (paymentApplicationId != null) {
			setPaymentApplicationId(paymentApplicationId);
		}

		String remoteId = (String)attributes.get("remoteId");

		if (remoteId != null) {
			setRemoteId(remoteId);
		}

		Double amount = (Double)attributes.get("amount");

		if (amount != null) {
			setAmount(amount);
		}

		Long type = (Long)attributes.get("type");

		if (type != null) {
			setType(type);
		}
	}

	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public long getTransactionLogId() {
		return _transactionLogId;
	}

	public void setTransactionLogId(long transactionLogId) {
		_transactionLogId = transactionLogId;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	public long getTransactionId() {
		return _transactionId;
	}

	public void setTransactionId(long transactionId) {
		_transactionId = transactionId;
	}

	public String getPaymentApplicationId() {
		if (_paymentApplicationId == null) {
			return StringPool.BLANK;
		}
		else {
			return _paymentApplicationId;
		}
	}

	public void setPaymentApplicationId(String paymentApplicationId) {
		_columnBitmask |= PAYMENTAPPLICATIONID_COLUMN_BITMASK;

		if (_originalPaymentApplicationId == null) {
			_originalPaymentApplicationId = _paymentApplicationId;
		}

		_paymentApplicationId = paymentApplicationId;
	}

	public String getOriginalPaymentApplicationId() {
		return GetterUtil.getString(_originalPaymentApplicationId);
	}

	public String getRemoteId() {
		if (_remoteId == null) {
			return StringPool.BLANK;
		}
		else {
			return _remoteId;
		}
	}

	public void setRemoteId(String remoteId) {
		_columnBitmask |= REMOTEID_COLUMN_BITMASK;

		if (_originalRemoteId == null) {
			_originalRemoteId = _remoteId;
		}

		_remoteId = remoteId;
	}

	public String getOriginalRemoteId() {
		return GetterUtil.getString(_originalRemoteId);
	}

	public double getAmount() {
		return _amount;
	}

	public void setAmount(double amount) {
		_amount = amount;
	}

	public long getType() {
		return _type;
	}

	public void setType(long type) {
		_type = type;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			TransactionLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TransactionLog toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (TransactionLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		TransactionLogImpl transactionLogImpl = new TransactionLogImpl();

		transactionLogImpl.setUuid(getUuid());
		transactionLogImpl.setCompanyId(getCompanyId());
		transactionLogImpl.setGroupId(getGroupId());
		transactionLogImpl.setUserId(getUserId());
		transactionLogImpl.setTransactionLogId(getTransactionLogId());
		transactionLogImpl.setCreateDate(getCreateDate());
		transactionLogImpl.setModifiedDate(getModifiedDate());
		transactionLogImpl.setTransactionId(getTransactionId());
		transactionLogImpl.setPaymentApplicationId(getPaymentApplicationId());
		transactionLogImpl.setRemoteId(getRemoteId());
		transactionLogImpl.setAmount(getAmount());
		transactionLogImpl.setType(getType());

		transactionLogImpl.resetOriginalValues();

		return transactionLogImpl;
	}

	public int compareTo(TransactionLog transactionLog) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				transactionLog.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		TransactionLog transactionLog = null;

		try {
			transactionLog = (TransactionLog)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = transactionLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		TransactionLogModelImpl transactionLogModelImpl = this;

		transactionLogModelImpl._originalUuid = transactionLogModelImpl._uuid;

		transactionLogModelImpl._originalGroupId = transactionLogModelImpl._groupId;

		transactionLogModelImpl._setOriginalGroupId = false;

		transactionLogModelImpl._originalPaymentApplicationId = transactionLogModelImpl._paymentApplicationId;

		transactionLogModelImpl._originalRemoteId = transactionLogModelImpl._remoteId;

		transactionLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TransactionLog> toCacheModel() {
		TransactionLogCacheModel transactionLogCacheModel = new TransactionLogCacheModel();

		transactionLogCacheModel.uuid = getUuid();

		String uuid = transactionLogCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			transactionLogCacheModel.uuid = null;
		}

		transactionLogCacheModel.companyId = getCompanyId();

		transactionLogCacheModel.groupId = getGroupId();

		transactionLogCacheModel.userId = getUserId();

		transactionLogCacheModel.transactionLogId = getTransactionLogId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			transactionLogCacheModel.createDate = createDate.getTime();
		}
		else {
			transactionLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			transactionLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			transactionLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		transactionLogCacheModel.transactionId = getTransactionId();

		transactionLogCacheModel.paymentApplicationId = getPaymentApplicationId();

		String paymentApplicationId = transactionLogCacheModel.paymentApplicationId;

		if ((paymentApplicationId != null) &&
				(paymentApplicationId.length() == 0)) {
			transactionLogCacheModel.paymentApplicationId = null;
		}

		transactionLogCacheModel.remoteId = getRemoteId();

		String remoteId = transactionLogCacheModel.remoteId;

		if ((remoteId != null) && (remoteId.length() == 0)) {
			transactionLogCacheModel.remoteId = null;
		}

		transactionLogCacheModel.amount = getAmount();

		transactionLogCacheModel.type = getType();

		return transactionLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", transactionLogId=");
		sb.append(getTransactionLogId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", transactionId=");
		sb.append(getTransactionId());
		sb.append(", paymentApplicationId=");
		sb.append(getPaymentApplicationId());
		sb.append(", remoteId=");
		sb.append(getRemoteId());
		sb.append(", amount=");
		sb.append(getAmount());
		sb.append(", type=");
		sb.append(getType());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.beorn.onlinepayment.model.TransactionLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionLogId</column-name><column-value><![CDATA[");
		sb.append(getTransactionLogId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>transactionId</column-name><column-value><![CDATA[");
		sb.append(getTransactionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paymentApplicationId</column-name><column-value><![CDATA[");
		sb.append(getPaymentApplicationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remoteId</column-name><column-value><![CDATA[");
		sb.append(getRemoteId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>amount</column-name><column-value><![CDATA[");
		sb.append(getAmount());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>type</column-name><column-value><![CDATA[");
		sb.append(getType());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = TransactionLog.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			TransactionLog.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userUuid;
	private long _transactionLogId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _transactionId;
	private String _paymentApplicationId;
	private String _originalPaymentApplicationId;
	private String _remoteId;
	private String _originalRemoteId;
	private double _amount;
	private long _type;
	private long _columnBitmask;
	private TransactionLog _escapedModelProxy;
}