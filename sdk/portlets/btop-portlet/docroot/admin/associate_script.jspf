<%--
/**
 * Copyright (c) 2007-2013 BEORN Technologies, SARL. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
 */
--%>
<aui:script use="aui-base,aui-live-search,dd,event-custom,event-valuechange" position="inline">

	var form = A.one('#<portlet:namespace /><%= randomNamespace %>');
	var associatedListContainer = A.one('#<portlet:namespace /><%= randomNamespace %>associatedListContainer');
	var associateListContainer = A.one('#<portlet:namespace /><%= randomNamespace %>associateListContainer');
	var associateListElements = associateListContainer.all('.associate-list-element');
	var associateSearchInput = A.one('#<portlet:namespace /><%= randomNamespace %>search');

	form.publish('modified', {
        emitFacade: true
    });
    
    function fireModifiedEvent() {
    	form.fire('modified', {});
    }
    
	var activitySearch = new A.LiveSearch({ 
		input: associateSearchInput,
		nodes: associateListElements, 
		data: function(node) {
			return node.text();
		},
		show: function(node) {
			node.removeClass('associate-list-element-search-hidden');
		},
		hide: function(node) {
			node.addClass('associate-list-element-search-hidden');
		}
	});
	
	var dndContainer = A.one('#<portlet:namespace/><%= randomNamespace %>dndContainer');
	var dndArea = dndContainer.one('.associate-entity-drop-area');
	
	var dndGroups = '<portlet:namespace /><%= randomNamespace %>associateList';
		
	dndContainer.all('.associate-list-element').each(function(associateListElement) {
		var drag = new A.DD.Drag({
	        node: associateListElement,
	        groups: dndGroups,
	        on: {
				'drag:start': function(event) {
					associateListElement.hide();
	        	},
	        	'drag:drophit': function(event) {
					associateListElement.one('input').attr('value', 'true');
					associateListElement.appendTo(associatedListContainer);
	        		associateListElement.show();
	        		drag.set('lock', true);
      				fireModifiedEvent();
	        	},
	        	'drag:dropmiss': function(event) {
	        		associateListElement.show();
	        	}
	        }

	    }).plug(A.Plugin.DDProxy, {
	   		moveOnEnd: false,
	   		positionProxy: false
	    });
	    
	    associateListElement.drag = drag;
	});
	
	new A.DD.Drop({
        node: dndArea,
        groups: dndGroups
    });

	associatedListContainer.delegate('click', function(event) {
		var associateListElement = event.currentTarget.ancestor('.associate-list-element');
		associateListElement.one('input').attr('value', 'false');
		associateListElement.appendTo(associateListContainer);
      	associateListElement.drag.set('lock', false);
      	fireModifiedEvent();
	}, '.associate-list-element-remove');

	dndContainer.all('.associate-list-element input[value="true"]').each(function(associateListInput) {
		var associateListElement = associateListInput.ancestor('.associate-list-element');
		associateListElement.appendTo(associatedListContainer);
      	associateListElement.show();
      	associateListElement.drag.set('lock', true);
	});
	
</aui:script>